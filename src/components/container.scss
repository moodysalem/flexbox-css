// parent styles
@mixin parent-styles($prefix) {
  &.#{$prefix}flex-direction- {
    &row {
      flex-direction: row;
      &-reverse {
        flex-direction: row-reverse;
      }
    }
    &column {
      flex-direction: column;
      &-reverse {
        flex-direction: column-reverse;
      }
    }
  }

  &.#{$prefix}flex-wrap- {
    &nowrap {
      flex-wrap: nowrap;
    }
    &wrap {
      flex-wrap: wrap;
    }
    &wrap-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  // justification is controlled by justify-(start/end/center/space-between/space-around)
  &.#{$prefix}justify-content- {
    &flex-start {
      justify-content: flex-start;
    }
    &flex-end {
      justify-content: flex-end;
    }
    &center {
      justify-content: center;
    }
    &space-between {
      justify-content: space-between;
    }
    &space-around {
      justify-content: space-around;
    }
  }

  // item alignment is controlled by align-items-(start/end/center/baseline/stretch)
  &.#{$prefix}align-items- {
    &flex-start {
      align-items: flex-start;
    }
    &flex-end {
      align-items: flex-end;
    }
    &center {
      align-items: center;
    }
    &baseline {
      align-items: baseline;
    }
    &stretch {
      align-items: stretch;
    }
  }

  // content alignment is controlled by align-content-(start/end/center/space-between/space-around/stretch)
  &.#{$prefix}align-content- {
    &flex-start {
      align-content: flex-start;
    }
    &flex-end {
      align-content: flex-end;
    }
    &center {
      align-content: center;
    }
    &space-between {
      align-content: space-between;
    }
    &space-around {
      align-content: space-around;
    }
    &stretch {
      align-content: stretch;
    }
  }
}

// child item styles
@mixin parent-styles-responsive($prefix, $minWidth, $maxWidth) {
  @if ($minWidth > 0) {
    @if ($maxWidth > $minWidth) {
      @media (min-width: $minWidth) and (max-width: $maxWidth) {
        @include parent-styles($prefix);
      }
    } @else {
      @media (min-width: $minWidth) {
        @include parent-styles($prefix);
      }
    }
  } @else if ($maxWidth > 0) {
    @media (max-width: $maxWidth) {
      @include parent-styles($prefix);
    }
  }
}

.display-flex {
  display: flex;

  @include parent-styles('');

  @each $prefix-info in $responsive-prefixes {
    $prefix: nth($prefix-info, 1);
    $min: nth($prefix-info, 2);
    $max: nth($prefix-info, 3);
    @include parent-styles-responsive($prefix, $min, $max);
  }
}