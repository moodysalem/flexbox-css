@mixin item-styles($prefix) {
  .#{$prefix}flex-none {
    flex: none;
  }

  .#{$prefix}flex-basis- {
    &auto {
      flex-basis: auto;
    }

    $flex-basis-increment: 100 / $flex-basis-steps;
    @for $i from 0 through ($flex-basis-increment) {
      $basis: $i * $flex-basis-increment;
      &#{$basis} {
        flex-basis: $basis * 1%;
      }
    }
  }

  // individual item alignment classes
  .#{$prefix}align-self- {
    &auto {
      align-self: auto;
    }
    &flex-start {
      align-self: flex-start;
    }
    &flex-end {
      align-self: flex-end;
    }
    &center {
      align-self: center;
    }
    &baseline {
      align-self: baseline;
    }
    &stretch {
      align-self: stretch;
    }
  }

  // .item.order-x
  @for $i from 1 through 12 {
    .#{$prefix}order- {
      &#{$i} {
        order: $i;
      }
    }
  }

  @for $i from 0 through 12 {
    .#{$prefix}flex-grow-#{$i} {
      flex-grow: $i;
    }
    .#{$prefix}flex-shrink-#{$i} {
      flex-shrink: $i;
    }
  }
}

// child item styles
@mixin item-styles-responsive($prefix, $minWidth, $maxWidth) {
  @if ($minWidth > 0) {
    @if ($maxWidth > $minWidth) {
      @media (min-width: $minWidth) and (max-width: $maxWidth) {
        @include item-styles($prefix);
      }
    } @else {
      @media (min-width: $minWidth) {
        @include item-styles($prefix);
      }
    }
  } @else if ($maxWidth > 0) {
    @media (max-width: $maxWidth) {
      @include item-styles($prefix);
    }
  }
}

@include item-styles('');

@each $prefix-info in $responsive-prefixes {
  $prefix: nth($prefix-info, 1);
  $min: nth($prefix-info, 2);
  $max: nth($prefix-info, 3);
  @include item-styles-responsive($prefix, $min, $max);
}