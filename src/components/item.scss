@mixin item-styles($prefix) {
  &.#{$prefix}none {
    flex: none;
  }

  // individual item alignment classes
  &.#{$prefix}align-self- {
    &auto {
      align-self: auto;
    }
    &flex-start {
      align-self: flex-start;
    }
    &flex-end {
      align-self: flex-end;
    }
    &center {
      align-self: center;
    }
    &baseline {
      align-self: baseline;
    }
    &stretch {
      align-self: stretch;
    }
  }

  // .item.order-x
  @for $i from 1 through 12 {
    &.#{$prefix}order- {
      &#{$i} {
        order: $i;
      }
    }
  }

  @for $i from 0 through 12 {
    &.#{$prefix}flex-grow-#{$i} {
      flex-grow: $i;
    }
    &.#{$prefix}flex-shrink-#{$i} {
      flex-shrink: $i;
    }
  }
}

// child item styles
@mixin item-styles-responsive($prefix, $minWidth, $maxWidth) {
  @if ($minWidth > 0) {
    @if ($maxWidth > $minWidth) {
      @media (min-width: $minWidth) and (max-width: $maxWidth) {
        @include item-styles($prefix);
      }
    } @else {
      @media (min-width: $minWidth) {
        @include item-styles($prefix);
      }
    }
  } @else if ($maxWidth > 0) {
    @media (max-width: $maxWidth) {
      @include item-styles($prefix);
    }
  }
}

.display-flex {
  // in rows the min-width is set to 0 for browser support
  &.flex-direction- {
    &row {
      > .item {
        min-width: 0;
      }
    }
    &column {
      > .item {
        min-width: 0;
      }
    }

    &row, &column {
      > .item {
        // default behavior is not to flex (requires grow or shrink classes)
        flex: none;
        @include item-styles('');

        @each $prefix-info in $responsive-prefixes {
          $prefix: nth($prefix-info, 1);
          $min: nth($prefix-info, 2);
          $max: nth($prefix-info, 3);
          @include item-styles-responsive($prefix, $min, $max);
        }
      }
    }
  }
}